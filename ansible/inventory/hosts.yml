all:
  children:
    # ===================================================================
    # ENVIRONMENT-BASED GROUPING
    # (Like AWS accounts or business environments)
    # Hosts can belong to multiple environments for different purposes
    # ===================================================================
    lab_environment:
      children:
        control_infrastructure:
          hosts:
            control-01: {}              # Standard naming
        automation_targets:
          hosts:
            git-01: {}                  # Standard naming  
            docker-01: {}               # Standard naming
            siem-01: {}                 # Standard naming
            tgt-01: {}                  # Standard naming
        domain_services:
          hosts:
            dc-01: {}                   # Standard naming
    
    # ===================================================================
    # ROLE-BASED GROUPING
    # (Like application tiers or service functions)
    # Configuration inheritance: each role gets specific config from group_vars/roles/
    # ===================================================================
    control_nodes:
      hosts:
        control-01: {}                  # Inherits control node configuration
    
    devops_infrastructure:
      hosts:
        git-01: {}                      # Inherits DevOps platform configuration
    
    container_platforms:
      hosts:
        docker-01: {}                   # Inherits container platform configuration
    
    security_infrastructure:
      hosts:
        siem-01: {}                     # Inherits security monitoring configuration
        
    automation_test_targets:
      hosts:                            # Inherits target configuration
        tgt-01: {}                      # Ubuntu 24.04 target
        #rl9-tgt-01: {}                  # Rocky Linux 9 target (future)
        #ub20-tgt-01: {}                 # Ubuntu 20.04 target (future)
        #ws22-tgt-01: {}                 # Windows Server target (future)
    
    domain_controllers:
      hosts:
        dc-01: {}                       # Inherits Windows domain configuration
    
    # ===================================================================
    # PLATFORM-BASED GROUPING
    # (Like operating system families)
    # All Ubuntu systems inherit Ubuntu-specific configurations
    # ===================================================================
    ubuntu_systems:
      hosts:
        control-01: {}                  # Inherits Ubuntu platform config
        git-01: {}                      # Inherits Ubuntu platform config
        docker-01: {}                   # Inherits Ubuntu platform config
        siem-01: {}                     # Inherits Ubuntu platform config
        tgt-01: {}                      # Inherits Ubuntu platform config
    
    windows_systems:
      hosts:
        dc-01: {}                       # Inherits Windows platform config
    
    # ===================================================================
    # NETWORK-BASED GROUPING
    # (Like VPCs, subnets, or security zones)
    # All management network hosts inherit network-specific settings
    # ===================================================================
    management_network:
      hosts:
        control-01: {}                  # Inherits management network config
        git-01: {}                      # Inherits management network config
        docker-01: {}                   # Inherits management network config
        dc-01: {}                       # Inherits management network config
        siem-01: {}                     # Inherits management network config
        tgt-01: {}                      # Inherits management network config
    
    # ===================================================================
    # AUTOMATION GROUPING
    # (Systems that receive automation vs perform automation)
    # Separates controllers from targets for different security policies
    # ===================================================================
    automation_controllers:
      hosts:
        control-01: {}                  # Performs automation (needs automation tools)
    
    automation_receivers:
      hosts:
        git-01: {}                      # Receives automation (needs automation agents)
        docker-01: {}                   # Receives automation (needs automation agents)
        siem-01: {}                     # Receives automation (needs automation agents)
        tgt-01: {}                      # Receives automation (needs automation agents)
        dc-01: {}                       # Receives automation (needs WinRM/PowerShell)

# ===================================================================
# NAMING CONVENTION FLEXIBILITY
# This enterprise pattern works with ANY naming convention:
#
# SEQUENTIAL NAMING:
# widget_servers:
#   hosts:
#     widget-[001:100]: {}            # Creates widget-001 through widget-100
#
# FUNCTIONAL NAMING:
# widget_servers:
#   hosts:
#     widget-primary: {}              # Functional name describing purpose
#     widget-backup: {}               # Functional name describing purpose
#     widget-analytics: {}            # Functional name describing purpose
#
# MIXED NAMING:
# widget_servers:
#   hosts:
#     widget-prod-[01:50]: {}         # 50 standard production servers
#     widget-master-controller: {}    # Special master server
#     widget-backup-primary: {}       # Special backup server
#     LEGACY_WIDGET_SERVER: {}        # Legacy system (existing name)
#
# CONFIGURATION: All hosts in widget_servers group inherit from:
# group_vars/roles/widget_servers.yml (regardless of naming)
# ===================================================================
